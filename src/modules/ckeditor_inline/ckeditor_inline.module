<?php

use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Link;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\Node;
use Drupal\Core\Entity\EntityInterface;
use Drupal\block\Entity\Block;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_page_attachments().
 * 
 * Add inline editor libraries on all pages
 * 
 * @TODO: We could limit this to just node view pages 
 */
function ckeditor_inline_page_attachments(array &$attachments) {
  $current_theme = \Drupal::theme()->getActiveTheme()->getName();
  $default_theme = $config = \Drupal::config('system.theme')->get('default');
  if (\Drupal::currentUser()->hasPermission('use inline editor') && $current_theme == $default_theme) {
    $attachments['#attached']['library'][] = 'ckeditor_inline/ckeditor_inline';
    $attachments['#attached']['drupalSettings']['pluginPath'] = '/' . drupal_get_path('module', 'ckeditor_inline') . '/ckeditor/plugins/';
  }
  else {
    $attachments['#attached']['library'][] = 'ckeditor_inline/ckeditor_inline_admin';
  }
}

/**
 * Implements hook_preprocess_html().
 * 
 * Add data fields to body tag so editor can find UUID and node type.
 */
function ckeditor_inline_preprocess_html(array &$variables) {
  $route = \Drupal::service('current_route_match');
  if ($route->getRouteName() == 'entity.node.canonical'){
    $node = $route->getParameter('node');
    $node_type = $node->getType();
    if ($node_type == 'article') {
      $variables['attributes']['data-uuid'] = $node->uuid();
      $variables['attributes']['data-node-type'] = $node_type;
    }
  }
}

/**
 * Implements hook_entity_presave().
 * 
 * For images save width and height in attached fields.
 * For nodes to be edited make sure the display field and body field are 
 * not empty but content placeholders.
 */
function ckeditor_inline_entity_presave(EntityInterface $entity) {
  if ($entity->getEntityType()->id() == 'file' && strpos($entity->getMimeType(), 'image') === 0) {
    // Save width and height in image fields so they are available to editor.
    $uri = $entity->getFileUri();
    $image = \Drupal::service('image.factory')->get($uri);
    $entity->field_image_width = $image->getWidth();
    $entity->field_image_height = $image->getHeight();
  }
  else if ($entity->getEntityType()->id() == 'node' ) {
    // Make sure display title and body fields have placeholder set.
    if ($entity->hasField('field_display_title')) {
      if ($entity->get('field_display_title')->isEmpty()) {
        $entity->field_display_title = $entity->title;
      }
      else {
        $entity->title = strip_tags($entity->get('field_display_title')->getValue()[0]['value']);
      }
    }
    if ($entity->hasField('field_impact_statement') && $entity->get('field_impact_statement')->isEmpty()) {
      $entity->field_impact_statement = t('Impact statement');
    }
    if ($entity->hasField('body') && $entity->get('body')->isEmpty()) {
      $entity->body = t('Type something here ...');
    }
  }
}

/**
 * Implements hook_block_access().
 * 
 * Do not show tabs on node view page if user using inline editor.
 */
function ckeditor_inline_block_access(Block $block, string $operation, AccountInterface $account) {
  if ($operation == 'view' && $block->getPluginId() == 'local_tasks_block') {
    $route = \Drupal::service('current_route_match');
    if ($route->getRouteName() == 'entity.node.canonical'){
      /** @var NodeInterface $node */
      $node = $route->getParameter('node');
      if ($node->getType() == 'article' && \Drupal::currentUser()->hasPermission('use inline editor')) {
        return AccessResult::forbidden()->cachePerPermissions();
      }
    }
  }
  return AccessResult::neutral()->cachePerPermissions();
}

/**
 * Implements hook_form_alter().
 * 
 * Hide body, display title and image fields if creating or editing an article.
 */
function ckeditor_inline_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_article_edit_form') {
    $form['title']['widget'][0]['value']['#access'] = FALSE;
    $form['field_content_json']['#disabled'] = TRUE;
  }

  if ($form_id == 'node_article_form') {
    $form['title']['widget'][0]['value']['#access'] = FALSE;
    $form['field_content_json']['#access'] = FALSE;
  }
}

/**
 * Implements hook_node_create().
 */
function ckeditor_inline_node_create(NodeInterface $node) {
  switch ($node->getType()) {
    case 'article':
      $node->title = t('Title');
      break;
  }
}

/**
 * Implements hook_node_presave().
 */
function ckeditor_inline_node_presave(Node $node) {
  if ($node->hasField('field_content_json') && $node->hasField('body')) {
    /** @var \Drupal\ckeditor_inline\HtmlJsonSerializer */
    $normalizer = \Drupal::service('ckeditor_inline.html_json_normalizer');
    $body = $node->get('body')->getValue();
    $body[0]['value'] = preg_replace('~[\s\n]*<p>&nbsp;</p>~', '', $body[0]['value']);
    $node->field_content_json = json_encode($normalizer->normalize($body[0]['value']), JSON_PRETTY_PRINT);
    $node->body = $body;
  }
}

/**
 * Implements hook_system_breadcrumb_alter().
 */
function ckeditor_inline_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInterface $route_match, array $context) {
  if ($breadcrumb) {
    $node = \Drupal::request()->get('node');
    $types = ['article'];
    $request = \Drupal::request();

    // If the node is a type with no menu placement, attach a breadcrumb.
    if ($node && in_array($node->bundle(), $types) && !\Drupal::service('router.admin_context')->isAdminRoute()) {
      $breadcrumb->addLink(Link::createFromRoute(t('Create post'), 'entity.node.edit_form', ['node' => $node->id()]));
      $breadcrumb->addLink(Link::createFromRoute(t('Editor'), '<nolink>'));

      $breadcrumb->addCacheTags(['node:' . $node->id()]);
    }
  }
}
